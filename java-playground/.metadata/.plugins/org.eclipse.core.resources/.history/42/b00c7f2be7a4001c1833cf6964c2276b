package com.lwl.cj.day17;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class EmployeeServiceImpl implements EmployeeService {
	
	private List<Employee> empList;
	
	{
		empList = CsvReaderUtil.loadFromCsv()();
		System.out.println(empList);
	}
	@Override
	public List<Long> getAllEmpIds() {
		/*
		 * List<Long> idList = new ArrayList<Long>(); if(!empList.isEmpty()) {
		 * for(Employee e:empList){ idList.add(e.getEmpno()); } } else {
		 * System.out.println("Employee list is empty"); }
		 */
		//Use map because we want to apply something to all elements
		//use filter when you want to check on elements passed. 
		//Return number would be lower # of elements
		List<Long> idList = empList.stream().map(e->e.getEmpno()).collect(Collectors.toList());
		return idList;
	}

	@Override
	public List<Employee> getEmployee(String dept) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Employee> getMaxPaidEmpOfEachDept() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double maxSalaryDiff(String dept1, String dep2) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public List<Employee> getEmpInSortingOrder() {
		// TODO Auto-generated method stub
		return null;
	}
	
	private List<String> getUniqueDeptName(){
		List<String> list = new ArrayList<String>();
		for(Employee emp: empList) {
			String dname = emp.getDept();
			if(!list.contains(dname)) {
				list.add(dname);
			}
		}
		return list;
	}
	
	//Take all employees in list
	//Check employees based on deptartment
	//than get all salaries of that department
	//get maximum of that department
	public double maxSalary(String dept) {
		return empList.stream()
				.filter(e -> e.getDept().equalsIgnoreCase(dept))
				.mapToDouble(e->e.getSalary())
				.max().getAsDouble();
	}
	public static void main(String[] args) {
		EmployeeServiceImpl es = new EmployeeServiceImpl();
		es.maxSalary("Qa");
	}

}
